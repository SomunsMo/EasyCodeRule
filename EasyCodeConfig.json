{
  "author" : "Somunsm",
  "version" : "1.2.8",
  "userSecure" : "",
  "currTypeMapperGroupName" : "Default",
  "currTemplateGroupName" : "Somunsm",
  "currColumnConfigGroupName" : "Default",
  "currGlobalConfigGroupName" : "Somunsm",
  "typeMapper" : {
    "Somunsm" : {
      "name" : "Somunsm",
      "elementList" : [ {
        "matchType" : "REGEX",
        "columnType" : "varchar(\\(\\d+\\))?",
        "javaType" : "java.lang.String"
      }, {
        "matchType" : "REGEX",
        "columnType" : "char(\\(\\d+\\))?",
        "javaType" : "java.lang.String"
      }, {
        "matchType" : "REGEX",
        "columnType" : "(tiny|medium|long)*text",
        "javaType" : "java.lang.String"
      }, {
        "matchType" : "REGEX",
        "columnType" : "decimal(\\(\\d+,\\d+\\))?",
        "javaType" : "java.lang.Double"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "integer",
        "javaType" : "java.lang.Integer"
      }, {
        "matchType" : "REGEX",
        "columnType" : "(tiny|small|medium)*int(\\(\\d+\\))?",
        "javaType" : "java.lang.Integer"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "int4",
        "javaType" : "java.lang.Integer"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "int8",
        "javaType" : "java.lang.Long"
      }, {
        "matchType" : "REGEX",
        "columnType" : "bigint(\\(\\d+\\))?",
        "javaType" : "java.lang.Long"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "date",
        "javaType" : "java.time.LocalDate"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "datetime",
        "javaType" : "java.time.LocalDateTime"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "timestamp",
        "javaType" : "java.util.Date"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "time",
        "javaType" : "java.time.LocalTime"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "boolean",
        "javaType" : "java.lang.Boolean"
      }, {
        "matchType" : "REGEX",
        "columnType" : "(tiny|small|medium)*int(\\(\\d+\\))1",
        "javaType" : "java.util.Boolean"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "int unsigned",
        "javaType" : "java.lang.Long"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "tinyint unsigned",
        "javaType" : "java.lang.Integer"
      } ]
    }
  },
  "template" : {
    "Somunsm" : {
      "name" : "Somunsm",
      "elementList" : [ {
        "name" : "controller.java.vm",
        "code" : "##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Controller\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/controller\"))\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}controller;\n\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.param.$!{tableInfo.name}Param;\nimport $!{tableInfo.savePackageName}.vo.$!{tableInfo.name}Vo;\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\nimport $!{tableInfo.savePackageName}.$!{queryPagePath}.Page;\nimport $!{tableInfo.savePackageName}.$!{responseResultPath}.PageResult;\nimport $!{tableInfo.savePackageName}.$!{responseResultPath}.ResponseResult;\nimport org.springframework.web.bind.annotation.*;\n\nimport jakarta.annotation.Resource;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表控制层\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@RestController\n@RequestMapping(\"$!tool.firstLowerCase($tableInfo.name)\")\npublic class $!{tableName} {\n    /**\n     * 服务对象\n     */\n    @Resource\n    private $!{tableInfo.name}Service $!tool.firstLowerCase($tableInfo.name)Service;\n\n    /**\n     * 分页查询\n     *\n     * @param $!{tool.firstLowerCase($tableInfo.name)}Param 筛选条件\n     * @return 查询结果\n     */\n    @GetMapping\n    public PageResult<$!{tableInfo.name}> queryByPage($!{tableInfo.name}Param $!{tool.firstLowerCase($tableInfo.name)}Param) {\n        return this.$!{tool.firstLowerCase($tableInfo.name)}Service.queryByPage($!{tool.firstLowerCase($tableInfo.name)}Param);\n    }\n\n    /**\n     * 通过主键查询单条数据\n     *\n     * @param id 主键\n     * @return 单条数据\n     */\n    @GetMapping(\"{id}\")\n    public ResponseResult<$!{tableInfo.name}> queryById(@PathVariable(\"id\") $!pk.shortType id) {\n        return ResponseResult.success(this.$!{tool.firstLowerCase($tableInfo.name)}Service.queryById(id));\n    }\n\n    /**\n     * 新增数据\n     *\n     * @param $!{tool.firstLowerCase($tableInfo.name)} 实体\n     * @return 新增结果\n     */\n    @PostMapping\n    public ResponseResult<$!{tableInfo.name}> add(@RequestBody $!{tableInfo.name} $!{tool.firstLowerCase($tableInfo.name)}) {\n        return ResponseResult.success(this.$!{tool.firstLowerCase($tableInfo.name)}Service.insert($!{tool.firstLowerCase($tableInfo.name)}));\n    }\n\n    /**\n     * 编辑数据\n     *\n     * @param $!{tool.firstLowerCase($tableInfo.name)} 实体\n     * @return 编辑结果\n     */\n    @PutMapping\n    public ResponseResult<$!{tableInfo.name}> edit($!{tableInfo.name} $!{tool.firstLowerCase($tableInfo.name)}) {\n        return ResponseResult.success(this.$!{tool.firstLowerCase($tableInfo.name)}Service.update($!{tool.firstLowerCase($tableInfo.name)}));\n    }\n\n    /**\n     * 删除数据\n     *\n     * @param id 主键\n     * @return 删除是否成功\n     */\n    @DeleteMapping\n    public ResponseResult<Boolean> deleteById($!pk.shortType id) {\n        return ResponseResult.success(this.$!{tool.firstLowerCase($tableInfo.name)}Service.removeById(id));\n    }\n\n}\n"
      }, {
        "name" : "service.java.vm",
        "code" : "##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Service\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/service\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service;\n\nimport java.util.List;\n\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.param.$!{tableInfo.name}Param;\nimport $!{tableInfo.savePackageName}.vo.$!{tableInfo.name}Vo;\nimport $!{tableInfo.savePackageName}.$!{queryPagePath}.Page;\nimport $!{tableInfo.savePackageName}.$!{responseResultPath}.PageResult;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表服务接口\n *\n * @author $!author\n * @since $!time.currTime()\n */\npublic interface $!{tableName} {\n\n    /**\n     * 通过ID查询单条数据\n     *\n     * @param $!pk.name 主键\n     * @return 实例对象\n     */\n    $!{tableInfo.name} queryById($!pk.shortType $!pk.name);\n\n     /**\n     * 条件查询\n     *\n     * @param boosterKeys 筛选条件\n     * @return 查询结果\n     */\n    List<$!{tableInfo.name}> query($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));\n\n    /**\n     * 分页查询\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 筛选条件\n     * @param page      分页对象\n     * @return 查询结果\n     */\n    PageResult<$!{tableInfo.name}> queryByPage($!{tableInfo.name}Param $!tool.firstLowerCase($!{tableInfo.name})Param);\n\n    /**\n     * 新增数据\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象\n     * @return 实例对象\n     */\n    $!{tableInfo.name} insert($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));\n\n    /**\n     * 修改数据\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象\n     * @return 实例对象\n     */\n    $!{tableInfo.name} update($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));\n\n    /**\n     * 批量更新条件成立的数据\n     *\n     * @param condition  匹配条件\n     * @param latestData 更新后的数据\n     * @return 是否有被更新的数据\n     */\n    boolean batchUpdate($!{tableInfo.name} condition, $!{tableInfo.name} latestData);\n\n    /**\n     * 通过主键<h1>物理</h1>删除数据\n     *\n     * @param $!pk.name 主键\n     * @return 是否成功\n     */\n    //boolean deleteById($!pk.shortType $!pk.name);\n\n    /**\n     * 通过主键<h1>逻辑</h1>删除数据\n     *\n     * @param $!pk.name 主键\n     * @return 是否成功\n     */\n    boolean removeById($!pk.shortType $!pk.name);\n\n}"
      }, {
        "name" : "serviceImpl.java.vm",
        "code" : "##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"ServiceImpl\"))\n#set($optimistic = \"$!{field_optimistic}\")\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/service/impl\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service.impl;\n\nimport java.util.List;\nimport org.springframework.stereotype.Service;\n\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.param.$!{tableInfo.name}Param;\nimport $!{tableInfo.savePackageName}.vo.$!{tableInfo.name}Vo;\nimport $!{tableInfo.savePackageName}.mapper.$!{tableInfo.name}Mapper;\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\nimport $!{tableInfo.savePackageName}.$!{responseResultPath}.PageResult;\n\nimport $!{tableInfo.savePackageName}.core.exception.UpdateException;\n\nimport jakarta.annotation.Resource;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表服务实现类\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@Service\npublic class $!{tableName} implements $!{tableInfo.name}Service {\n    @Resource\n    private $!{tableInfo.name}Mapper $!tool.firstLowerCase($!{tableInfo.name})Mapper;\n\n    /**\n     * 通过ID查询单条数据\n     *\n     * @param $!pk.name 主键\n     * @return 实例对象\n     */\n    @Override\n    public $!{tableInfo.name} queryById($!pk.shortType $!pk.name) {\n        return this.$!{tool.firstLowerCase($!{tableInfo.name})}Mapper.queryById($!pk.name);\n    }\n\n    /**\n     * 条件查询\n     *\n     * @param $!{tool.firstLowerCase($tableInfo.name)} 筛选条件\n     * @return 查询结果\n     */\n    @Override\n    public List<$!{tableInfo.name}> query($!{tableInfo.name} $!{tool.firstLowerCase($tableInfo.name)}) {\n        return this.$!{tool.firstLowerCase($tableInfo.name)}Mapper.query($!{tool.firstLowerCase($tableInfo.name)});\n    }\n\n    /**\n     * 分页查询\n     *\n     * @param $!{tool.firstLowerCase($tableInfo.name)}Param 筛选条件\n     * @return 查询结果\n     */\n    @Override\n    public PageResult<$!{tableInfo.name}> queryByPage($!{tableInfo.name}Param $!{tool.firstLowerCase($tableInfo.name)}Param) {\n        long count = this.$!{tool.firstLowerCase($tableInfo.name)}Mapper.count($!{tool.firstLowerCase($tableInfo.name)}Param);\n        if(count <= 0){\n            return PageResult.success(new ArrayList<$!{tableInfo.name}>()).setTotal(0);\n        }\n        \n        return PageResult\n                .success(this.$!{tool.firstLowerCase($tableInfo.name)}Mapper.page($!{tool.firstLowerCase($tableInfo.name)}Param))\n                .setTotal(count);\n    }\n\n    /**\n     * 新增数据\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象\n     * @return 实例对象\n     */\n    @Override\n    public $!{tableInfo.name} insert($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {\n        this.$!{tool.firstLowerCase($!{tableInfo.name})}Mapper.insert($!tool.firstLowerCase($!{tableInfo.name}));\n        return $!tool.firstLowerCase($!{tableInfo.name});\n    }\n\n    /**\n     * 修改数据\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象\n     * @return 实例对象\n     */\n    @Override\n    public $!{tableInfo.name} update($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {\n        if (this.$!{tool.firstLowerCase($!{tableInfo.name})}Mapper.update($!{tool.firstLowerCase($!{tableInfo.name})}) <= 0) {\n            #if($!{optimistic} != \"\")\n                $!{tableInfo.name} dbEntity = this.queryById($!{tool.firstLowerCase($!{tableInfo.name})}.getId());\n                if (!dbEntity.get$!{tool.firstUpperCase($!{optimistic})}().equals($!{tool.firstLowerCase($!{tableInfo.name})}.get$!{tool.firstUpperCase($!optimistic)}())){\n                    UpdateException.optimisticLock();\n                }\n                \n            #end\n            UpdateException.e();\n        }\n        return this.queryById($!{tool.firstLowerCase($!{tableInfo.name})}.get$!tool.firstUpperCase($pk.name)());\n    }\n\n    @Override\n    public boolean batchUpdate($!{tableInfo.name} condition, $!{tableInfo.name} latestData) {\n        return this.$!{tool.firstLowerCase($!{tableInfo.name})}Mapper.batchUpdate(condition, latestData) <= 0;\n    }\n\n    /**\n     * 通过主键<h1>物理</h1>删除数据\n     *\n     * @param $!pk.name 主键\n     * @return 是否成功\n     */\n    //@Override\n    //public boolean deleteById($!pk.shortType $!pk.name) {\n    //    return this.$!{tool.firstLowerCase($!{tableInfo.name})}Mapper.deleteById($!pk.name) > 0;\n    //}\n    \n    /**\n     * 通过主键<h1>逻辑</h1>删除数据\n     *\n     * @param $!pk.name 主键\n     * @return 是否成功\n     */\n    @Override\n    public boolean removeById($!pk.shortType $!pk.name) {\n        return this.$!{tool.firstLowerCase($!{tableInfo.name})}Mapper.deleteById($!pk.name) > 0;\n    }\n}"
      }, {
        "name" : "mapper.java.vm",
        "code" : "##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Mapper\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/mapper\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}mapper;\n\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.param.$!{tableInfo.name}Param;\nimport $!{tableInfo.savePackageName}.vo.$!{tableInfo.name}Vo;\nimport org.apache.ibatis.annotations.Param;\nimport $!{tableInfo.savePackageName}.$!{queryPagePath}.Page;\nimport org.apache.ibatis.annotations.Mapper;\nimport java.util.List;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表数据库访问层\n *\n * @author $!author\n * @since $!time.currTime()\n */\n @Mapper\npublic interface $!{tableName} {\n\n    /**\n     * 通过ID查询单条数据\n     *\n     * @param $!pk.name 主键\n     * @return 实例对象\n     */\n    $!{tableInfo.name} queryById($!pk.shortType $!pk.name);\n\n     /**\n     * 条件查询\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 筛选条件\n     * @return 查询结果\n     */\n    List<$!{tableInfo.name}> query($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));\n\n    /**\n     * 分页查询\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 查询条件\n     * @param page         分页对象\n     * @return 对象列表\n     */\n    List<$!{tableInfo.name}> page($!{tableInfo.name}Param $!tool.firstLowerCase($!{tableInfo.name}));\n\n    /**\n     * 统计总行数\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 查询条件\n     * @return 总行数\n     */\n    long count($!{tableInfo.name}Param $!tool.firstLowerCase($!{tableInfo.name}));\n\n    /**\n     * 新增数据\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象\n     * @return 影响行数\n     */\n    int insert($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));\n\n    /**\n     * 批量新增数据（MyBatis原生foreach方法）\n     *\n     * @param entities List<$!{tableInfo.name}> 实例对象列表\n     * @return 影响行数\n     */\n    int insertBatch(@Param(\"entities\") List<$!{tableInfo.name}> entities);\n\n    /**\n     * 批量新增或按主键更新数据（MyBatis原生foreach方法）\n     *\n     * @param entities List<$!{tableInfo.name}> 实例对象列表\n     * @return 影响行数\n     */\n    int insertOrUpdateBatch(@Param(\"entities\") List<$!{tableInfo.name}> entities);\n\n    /**\n     * 修改数据\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象\n     * @return 影响行数\n     */\n    int update($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));\n\n    /**\n     * 批量更新条件成立的数据\n     *\n     * @param condition  匹配条件\n     * @param latestData 更新后的数据\n     * @return 更新了多少条记录\n     */\n    int batchUpdate(@Param(\"condition\") $!{tableInfo.name} condition, @Param(\"latestData\") $!{tableInfo.name} latestData);\n\n    /**\n     * 通过主键<h1>物理</h1>删除数据\n     *\n     * @param $!pk.name 主键\n     * @return 影响行数\n     */\n    int deleteById($!pk.shortType $!pk.name);\n\n    /**\n     * 通过主键批量<h1>物理</h1>删除数据\n     *\n     * @param $!pk.name 主键\n     * @return 影响行数\n     */\n    int deleteByIds(List<$!pk.shortType> $!pk.name);\n\n    /**\n     * 通过主键<h1>逻辑</h1>删除数据\n     *\n     * @param $!pk.name 主键\n     * @return 影响行数\n     */\n    int removeById($!pk.shortType $!pk.name);\n    \n     /**\n     * 通过主键批量<h1>逻辑</h1>删除数据\n     *\n     * @param $!{pk.name}s 主键列表\n     * @return 影响行数\n     */\n    int removeByIds(List<$!pk.shortType> $!{pk.name}s);\n}\n"
      }, {
        "name" : "mapper.xml.vm",
        "code" : "##引入mybatis支持\n$!{mybatisSupport.vm}\n\n##设置保存名称与保存位置\n$!callback.setFileName($tool.append($!{tableInfo.name}, \"Mapper.xml\"))\n$!callback.setSavePath($tool.append($modulePath, \"/src/main/resources/mapper\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"$!{tableInfo.savePackageName}.mapper.$!{tableInfo.name}Mapper\">\n\n    <resultMap type=\"$!{tableInfo.savePackageName}.entity.$!{tableInfo.name}\" id=\"$!{tableInfo.name}Map\">\n        #foreach($column in $tableInfo.fullColumn)\n        <result property=\"$!column.name\" column=\"$!column.obj.name\" jdbcType=\"$!column.ext.jdbcType\"/>\n        #end\n    </resultMap>\n\n    <!--查询单个-->\n    <select id=\"queryById\" resultMap=\"$!{tableInfo.name}Map\">\n        select \n            #allSqlColumn()\n        from $!tableInfo.obj.name\n        where $!pk.obj.name = #{$!pk.name}\n    </select>\n\n    <!--条件查询-->\n    <select id=\"query\" resultMap=\"$!{tableInfo.name}Map\">\n        select\n            #allSqlColumn()\n\n        from $!tableInfo.obj.name\n        <where>\n            #foreach($column in $tableInfo.fullColumn)\n            <if test=\"$!column.name != null#if($column.type.equals(\"java.lang.String\")) and $!column.name != ''#end\">\n                and $!column.obj.name = #{$!column.name}\n            </if>\n            #end\n        </where>\n    </select>\n\n    <!--分页查询-->\n    <select id=\"page\" resultMap=\"$!{tableInfo.name}Map\">\n        select\n            #allSqlColumn()\n\n        from $!tableInfo.obj.name\n        <where>\n            #foreach($column in $tableInfo.fullColumn)\n            <if test=\"$!column.name != null#if($column.type.equals(\"java.lang.String\")) and $!column.name != ''#end\">\n                and $!column.obj.name = #{$!column.name}\n            </if>\n            #end\n        </where>\n        limit #{start}, #{size}\n    </select>\n\n    <!--统计总行数-->\n    <select id=\"count\" resultType=\"java.lang.Long\">\n        select count(1)\n        from $!tableInfo.obj.name\n        <where>\n            #foreach($column in $tableInfo.fullColumn)\n            <if test=\"$!column.name != null#if($column.type.equals(\"java.lang.String\")) and $!column.name != ''#end\">\n                and $!column.obj.name = #{$!column.name}\n            </if>\n            #end\n        </where>\n    </select>\n\n    <!--新增所有列-->\n    <insert id=\"insert\" keyProperty=\"$!pk.name\" useGeneratedKeys=\"true\">\n        insert into $!{tableInfo.obj.name}(#foreach($column in $tableInfo.otherColumn)$!column.obj.name#if($foreach.hasNext), #end#end)\n        values (#foreach($column in $tableInfo.otherColumn)#{$!{column.name}}#if($foreach.hasNext), #end#end)\n    </insert>\n\n    <insert id=\"insertBatch\" keyProperty=\"$!pk.name\" useGeneratedKeys=\"true\">\n        insert into $!{tableInfo.obj.name}(#foreach($column in $tableInfo.otherColumn)$!column.obj.name#if($foreach.hasNext), #end#end)\n        values\n        <foreach collection=\"entities\" item=\"entity\" separator=\",\">\n        (\n        #foreach($column in $tableInfo.otherColumn)\n            #{entity.$!{column.name}}#if($foreach.hasNext),#end\n        #end\n        )\n        </foreach>\n    </insert>\n\n    <insert id=\"insertOrUpdateBatch\" keyProperty=\"$!pk.name\" useGeneratedKeys=\"true\">\n        insert into $!{tableInfo.obj.name}(#foreach($column in $tableInfo.otherColumn)$!column.obj.name#if($foreach.hasNext), #end#end)\n        values\n        <foreach collection=\"entities\" item=\"entity\" separator=\",\">\n            (#foreach($column in $tableInfo.otherColumn)#{entity.$!{column.name}}#if($foreach.hasNext), #end#end)\n        </foreach>\n        on duplicate key update\n        #foreach($column in $tableInfo.otherColumn)$!column.obj.name = values($!column.obj.name)#if($foreach.hasNext),\n        #end#end\n\n    </insert>\n\n    <!--通过主键修改数据-->\n    <update id=\"update\">\n        update $!{tableInfo.obj.name}\n        <set>\n            #foreach($column in $tableInfo.otherColumn)\n            <if test=\"$!column.name != null#if($column.type.equals(\"java.lang.String\")) and $!column.name != ''#end\">\n                #if($!column.name == \"$!field_optimistic\")\n                    $!column.obj.name = $!column.obj.name + 1,\n                #else\n                    $!column.obj.name = #{$!column.name},\n                #end\n            </if>\n            #end\n        </set>\n        where $!pk.obj.name = #{$!pk.name}\n        #if(\"$!field_optimistic\" != \"\")\n            AND $!{field_optimistic} = #{$!{field_optimistic}} \n        #end\n    </update>\n\n    <!--批量更新条件成立的数据-->\n    <update id=\"batchUpdate\">\n        update $!{tableInfo.obj.name}\n        <set>\n            #foreach($column in $tableInfo.otherColumn)\n            <if test=\"$!column.name != null#if($column.type.equals(\"java.lang.String\")) and $!column.name != ''#end\">\n                $!column.obj.name = #{$!column.name},\n            </if>\n            #end\n        </set>\n        <where>\n            #foreach($column in $tableInfo.otherColumn)\n            <if test=\"$!column.name != null#if($column.type.equals(\"java.lang.String\")) and $!column.name != ''#end\">\n                $!column.obj.name = #{$!column.name},\n            </if>\n            #end\n        </where>\n    </update>\n\n    <!--通过主键物理删除-->\n    <delete id=\"deleteById\">\n        DELETE\n        FROM $!{tableInfo.obj.name}\n        WHERE $!pk.obj.name = #{$!pk.name}\n    </delete>\n\n    <!--通过主键批量物理删除-->\n    <delete id=\"deleteByIds\">\n        DELETE\n        FROM $!{tableInfo.obj.name}\n        WHERE $!pk.obj.name IN #{$!pk.name}\n    </delete>\n\n    <!--通过主键逻辑删除-->\n    <update id=\"removeById\">\n        UPDATE $!{tableInfo.obj.name}\n        SET $!{field_remove}=1\n        WHERE $!pk.obj.name = #{$!pk.name}\n    </update>\n\n    <!--通过主键批量逻辑删除-->\n    <update id=\"removeByIds\">\n        UPDATE $!{tableInfo.obj.name}\n        SET $!{field_remove}=1\n        WHERE $!pk.obj.name IN #{$!pk.name}\n    </update>\n\n</mapper>\n"
      }, {
        "name" : "entity.java.vm",
        "code" : "##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/entity\", \".java\")\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"entity\")\n\n##使用全局变量实现默认包导入\n$!{autoImport.vm}\nimport java.io.Serializable;\n\n##使用宏定义实现类注释信息\n#tableComment(\"实体类\")\npublic class $!{tableInfo.name} implements Serializable {\n    private static final long serialVersionUID = $!tool.serial();\n#foreach($column in $tableInfo.fullColumn)\n    #if(${column.comment})/**\n     * ${column.comment}\n     */#end\n\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#end\n\n#foreach($column in $tableInfo.fullColumn)\n##使用宏定义实现get,set方法\n#getSetMethod($column)\n#end\n\n}\n"
      }, {
        "name" : "vo.java.vm",
        "code" : "##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/vo\", \"Vo.java\")\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"vo\")\n\n##使用全局变量实现默认包导入\n$!{autoImport.vm}\nimport java.io.Serializable;\n\n##使用宏定义实现类注释信息\n#tableComment(\"视图对象\")\npublic class $!{tableInfo.name}Vo implements Serializable {\n    private static final long serialVersionUID = $!tool.serial();\n#foreach($column in $tableInfo.fullColumn)\n    #if(${column.comment})/**\n     * ${column.comment}\n     */#end\n\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#end\n\n#foreach($column in $tableInfo.fullColumn)\n##使用宏定义实现get,set方法\n#getSetMethod($column)\n#end\n\n}\n"
      }, {
        "name" : "param.java.vm",
        "code" : "##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/param\", \"Param.java\")\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"param\")\n\n##使用全局变量实现默认包导入\n$!{autoImport.vm}\nimport java.io.Serializable;\n\nimport $!{tableInfo.savePackageName}.$!{queryPagePath}.PageParam;\n\n##使用宏定义实现类注释信息\n#tableComment(\"接口入参\")\npublic class $!{tableInfo.name}Param extends PageParam implements Serializable {\n    private static final long serialVersionUID = $!tool.serial();\n#foreach($column in $tableInfo.fullColumn)\n    #if(${column.comment})/**\n     * ${column.comment}\n     */#end\n\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#end\n\n#foreach($column in $tableInfo.fullColumn)\n##使用宏定义实现get,set方法\n#getSetMethod($column)\n#end\n\n}\n"
      } ]
    },
    "SomunsmBasic" : {
      "name" : "SomunsmBasic",
      "elementList" : [ {
        "name" : "page.java.vm",
        "code" : "##设置回调\n$!callback.setFileName(\"Page.java\")\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/core/page\"))\n\npackage $!{tableInfo.savePackageName}.$!{queryPagePath};\n\n/**\n * 分页参数接口\n */\npublic interface Page {\n\n    /**\n     * 单页面最多可以获取多少条数据\n     */\n    long MAX_SIZE = Long.MAX_VALUE;\n\n    /**\n     * 获取分页起始位置\n     */\n    long getStart();\n\n    /**\n     * 单页面获取多少条数据\n     */\n    long getSize();\n\n}"
      }, {
        "name" : "pageParam.java.vm",
        "code" : "##设置回调\n$!callback.setFileName(\"PageParam.java\")\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/core/page\"))\n\npackage $!{tableInfo.savePackageName}.$!{queryPagePath};\n\nimport java.io.Serializable;\nimport java.util.Objects;\n##这里是导入接口类(但同包下不需要导入)\n##import $!{tableInfo.savePackageName}.$!{queryPagePath}.Page;\n\n/**\n * 分页查询参数类\n */\npublic class PageParam implements Page, Serializable {\n    private static final long serialVersionUID = 1L;\n\n    /**\n     * 分页的最小页数\n     */\n    public static final long MIN_PAGE = 1L;\n    /**\n     * 分页单页的最小数据查询数\n     */\n    public static final long MIN_SIZE = 5L;\n    /**\n     * 分页单页的最大数据查询数\n     */\n    public static final long MAX_SIZE = 500L;\n\n    /**\n     * 要获取第几页\n     * (默认第1页)\n     */\n    private long page = 1L;\n    /**\n     * 单页面获取多少条数据\n     * (默认10条)\n     */\n    private long size = 10L;\n\n    //---\n\n    public PageParam() {\n    }\n\n    public PageParam(Long page, Long size) {\n        this.setPage(page);\n        this.setSize(size);\n    }\n\n    @Override\n    public long getStart() {\n        if (this.page <= MIN_PAGE) {\n            return 0;\n        }\n        \n        // 这里不加一是因为LIMIT是从0开始的\n        return (this.page - 1) * this.size;\n    }\n\n    public long getPage() {\n        return page;\n    }\n\n    public void setPage(long page) {\n        if (page < MIN_PAGE) {\n            this.page = MIN_PAGE;\n            return;\n        }\n        this.page = page;\n    }\n\n    @Override\n    public long getSize() {\n        return size;\n    }\n\n    public void setSize(long size) {\n        // 分页查询的单页数据量最小为5\n        if (size < MIN_SIZE) {\n            this.size = MIN_SIZE;\n            return;\n        }\n        if (size > MAX_SIZE){\n            this.size = MAX_SIZE;\n            return;\n        }\n        this.size = size;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (!(o instanceof PageParam)) return false;\n        PageParam pageParam = (PageParam) o;\n        return getStart() == pageParam.getStart() && getPage() == pageParam.getPage() && getSize() == pageParam.getSize();\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(getStart(), getPage(), getSize());\n    }\n\n    @Override\n    public String toString() {\n        return \"PageParam{\" +\n                \", page=\" + page +\n                \", size=\" + size +\n                '}';\n    }\n\n}"
      }, {
        "name" : "pageResult.java.vm",
        "code" : "##设置回调\n$!callback.setFileName(\"PageResult.java\")\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/core/result\"))\n\npackage $!{tableInfo.savePackageName}.$!{responseResultPath};\n\nimport $!{tableInfo.savePackageName}.core.status.ResponseStatus;\n\nimport java.util.List;\n\n/**\n * 分页结果响应类\n * 统一响应格式\n */\npublic class PageResult<T> {\n    /**\n     * 响应代码\n     */\n    private int code;\n    /**\n     * 状态码消息\n     */\n    private String msg;\n    /**\n     * 主要数据\n     */\n    private List<T> data;\n    /**\n     * 数据库中记录的总数量\n     * <p>\n     * 默认:-1（不想透露总记录数量）\n     */\n    private long total = -1;\n\n    //-\n\n    /**\n     * 无参构造函数\n     */\n    public PageResult() {\n    }\n\n    /**\n     * 构建指定响应结果\n     *\n     * @param status 状态枚举\n     * @param data   响应数据\n     */\n    public PageResult(ResponseStatus status, List<T> data) {\n        this.code = status.code();\n        this.msg = status.msg();\n        this.data = data;\n    }\n\n    /**\n     * 构建指定响应结果\n     *\n     * @param status 状态枚举\n     * @param data   响应数据\n     * @param total  数据库总记录量(-1为隐藏记录量)\n     */\n    public PageResult(ResponseStatus status, List<T> data, long total) {\n        this(status, data);\n        this.total = total;\n    }\n\n    //-\n\n    public int getCode() {\n        return code;\n    }\n\n    public PageResult<T> setCode(int code) {\n        this.code = code;\n        return this;\n    }\n\n    public String getMsg() {\n        return msg;\n    }\n\n    public PageResult<T> setMsg(String msg) {\n        this.msg = msg;\n        return this;\n    }\n\n    public List<T> getData() {\n        return data;\n    }\n\n    public PageResult<T> setData(List<T> data) {\n        this.data = data;\n        return this;\n    }\n\n    public long getTotal() {\n        return total;\n    }\n\n    public PageResult<T> setTotal(long total) {\n        this.total = total;\n        return this;\n    }\n\n    public PageResult<T> setStatus(ResponseStatus status) {\n        this.code = status.code();\n        this.msg = status.msg();\n        return this;\n    }\n\n\n    //-\n\n    /**\n     * 返回成功响应\n     */\n    public static PageResult<Void> success() {\n        return new PageResult<Void>(ResponseStatus.SUCCESS, null);\n    }\n\n    /**\n     * 返回成功响应\n     */\n    public static <T> PageResult<T> success(List<T> data) {\n        return new PageResult<T>(ResponseStatus.SUCCESS, data);\n    }\n\n    /**\n     * 返回成功响应\n     */\n    public static <T> PageResult<T> success(List<T> data, long total) {\n        return new PageResult<T>(ResponseStatus.SUCCESS, data, total);\n    }\n\n}"
      }, {
        "name" : "responseResult.java.vm",
        "code" : "##设置回调\n$!callback.setFileName(\"ResponseResult.java\")\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/core/result\"))\n\npackage $!{tableInfo.savePackageName}.$!{responseResultPath};\n\nimport $!{tableInfo.savePackageName}.core.status.ResponseStatus;\n\n/**\n * 通用响应类\n * 统一响应格式\n */\npublic class ResponseResult<T> {\n    /**\n     * 响应代码\n     */\n    private int code;\n    /**\n     * 状态码消息\n     */\n    private String msg;\n    /**\n     * 主要数据\n     */\n    private T data;\n\n    //-\n\n    /**\n     * 无参构造函数\n     */\n    public ResponseResult() {\n    }\n\n    /**\n     * 构建指定响应结果\n     * 注意：该构造函数不会返回数据！\n     *\n     * @param status 状态\n     */\n    public ResponseResult(ResponseStatus status) {\n        this.code = status.code();\n        this.msg = status.msg();\n    }\n\n    /**\n     * 构建指定响应结果\n     *\n     * @param status 状态枚举\n     * @param data   响应数据\n     */\n    public ResponseResult(ResponseStatus status, T data) {\n        this.code = status.code();\n        this.msg = status.msg();\n        this.data = data;\n    }\n\n    //-\n\n    public Integer getCode() {\n        return code;\n    }\n\n    public ResponseResult<T> setCode(Integer code) {\n        this.code = code;\n        return this;\n    }\n\n    public String getMsg() {\n        return msg;\n    }\n\n    public ResponseResult<T> setMsg(String msg) {\n        this.msg = msg;\n        return this;\n    }\n\n    public T getData() {\n        return data;\n    }\n\n    public ResponseResult<T> setData(T data) {\n        this.data = data;\n        return this;\n    }\n\n    public ResponseResult<T> setStatus(ResponseStatus status) {\n        this.code = status.code();\n        this.msg = status.msg();\n        return this;\n    }\n\n\n    //-\n\n    /**\n     * 返回成功响应\n     */\n    public static ResponseResult<Void> success() {\n        return new ResponseResult<Void>(ResponseStatus.SUCCESS, null);\n    }\n\n    /**\n     * 返回成功响应\n     */\n    public static <T> ResponseResult<T> success(T data) {\n        return new ResponseResult<T>(ResponseStatus.SUCCESS, data);\n    }\n    \n}"
      }, {
        "name" : "responseStatus.java.vm",
        "code" : "##设置回调\n$!callback.setFileName(\"ResponseStatus.java\")\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/core/status\"))\n\npackage $!{tableInfo.savePackageName}.core.status;\n\n/**\n * 响应状态码枚举类\n */\npublic enum ResponseStatus {\n    /**\n     * 操作成功\n     */\n    SUCCESS(200, \"操作成功\"),\n\n    /**\n     * 未登录\n     */\n    UNAUTHORIZED(401, \"未登录\"),\n    /**\n     * 登录过期\n     */\n    EXPIRED_AUTH(402, \"登录过期\"),\n    /**\n     * 用户名或密码错误\n     */\n    LOGIN_FAIL(403, \"用户名或密码错误\"),\n\n    /**\n     * 请求参数有误\n     */\n    PARAM_ERROR(412, \"请求参数有误\"),\n    /**\n     * 验证码不正确\n     */\n    CAPTCHA_ERROR(412, \"验证码不正确\"),\n\n    /**\n     * 账号已被临时锁定\n     */\n    TEMPORARY_LOCKED(443, \"账号已被临时锁定\"),\n    /**\n     * 账号已被永久锁定\n     */\n    PERMANENTLY_LOCKED(444, \"账号已被永久锁定\"),\n\n    /**\n     * 服务器异常\n     */\n    SERVICE_EXCEPTION(500, \"服务器异常\"),\n    ;\n\n    //=====================================================\n\n    /**\n     * 状态码\n     */\n    private final int code;\n    /**\n     * 状态码的描述\n     */\n    private final String msg;\n\n    ResponseStatus(int code, String msg) {\n        this.code = code;\n        this.msg = msg;\n    }\n\n    public int code() {\n        return this.code;\n    }\n\n    public String msg() {\n        return this.msg;\n    }\n\n}\n"
      }, {
        "name" : "e_updateException.java.vm",
        "code" : "##设置回调\n$!callback.setFileName(\"UpdateException.java\")\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/core/exception\"))\n\npackage $!{tableInfo.savePackageName}.core.exception;\n\n/**\n * 更新失败异常类\n */\npublic class UpdateException extends RuntimeException {\n\n    public UpdateException() {\n        super(\"update fail\");\n    }\n\n    public UpdateException(String message) {\n        super(message);\n    }\n\n    /**\n     * 抛出更新异常\n     */\n    public static void e() {\n        throw new UpdateException();\n    }\n\n    /**\n     * 抛出乐观锁导致的更新异常\n     */\n    public static void optimisticLock() {\n        throw new UpdateException(\"optimistic lock\");\n    }\n\n}"
      } ]
    }
  },
  "columnConfig" : { },
  "globalConfig" : {
    "Somunsm" : {
      "name" : "Somunsm",
      "elementList" : [ {
        "name" : "autoImport.vm",
        "value" : "##自动导入包（仅导入实体属性需要的包，通常用于实体类）\n#foreach($import in $importList)\nimport $!import;\n#end"
      }, {
        "name" : "define.vm",
        "value" : "##（Velocity宏定义）\n\n##定义设置表名后缀的宏定义，调用方式：#setTableSuffix(\"Test\")\n#macro(setTableSuffix $suffix)\n    #set($tableName = $!tool.append($tableInfo.name, $suffix))\n#end\n\n##定义设置包名后缀的宏定义，调用方式：#setPackageSuffix(\"Test\")\n#macro(setPackageSuffix $suffix)\n#if($suffix!=\"\")package #end#if($tableInfo.savePackageName!=\"\")$!{tableInfo.savePackageName}.#{end}$!suffix;\n#end\n\n##定义直接保存路径与文件名简化的宏定义，调用方式：#save(\"/entity\", \".java\")\n#macro(save $path $fileName)\n    $!callback.setSavePath($tool.append($tableInfo.savePath, $path))\n    $!callback.setFileName($tool.append($tableInfo.name, $fileName))\n#end\n\n##定义表注释的宏定义，调用方式：#tableComment(\"注释信息\")\n#macro(tableComment $desc)\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})$desc\n *\n * @author $!author\n * @since $!time.currTime()\n */\n#end\n\n##定义GET，SET方法的宏定义，调用方式：#getSetMethod($column)\n#macro(getSetMethod $column)\n\n    public $!{tool.getClsNameByFullName($column.type)} get$!{tool.firstUpperCase($column.name)}() {\n        return $!{column.name};\n    }\n\n    public void set$!{tool.firstUpperCase($column.name)}($!{tool.getClsNameByFullName($column.type)} $!{column.name}) {\n        this.$!{column.name} = $!{column.name};\n    }\n#end"
      }, {
        "name" : "init.vm",
        "value" : "##初始化区域\n\n##去掉表的t_前缀\n$!tableInfo.setName($tool.getClassName($tableInfo.obj.name.replaceFirst(\"book_\",\"\")))\n\n##参考阿里巴巴开发手册，POJO 类中布尔类型的变量，都不要加 is 前缀，否则部分框架解析会引起序列化错误\n#foreach($column in $tableInfo.fullColumn)\n#if($column.name.startsWith(\"is\") && $column.type.equals(\"java.lang.Boolean\"))\n    $!column.setName($tool.firstLowerCase($column.name.substring(2)))\n#end\n#end\n\n##实现动态排除列\n#set($temp = $tool.newHashSet(\"testCreateTime\", \"otherColumn\"))\n#foreach($item in $temp)\n    #set($newList = $tool.newArrayList())\n    #foreach($column in $tableInfo.fullColumn)\n        #if($column.name!=$item)\n            ##带有反回值的方法调用时使用$tool.call来消除返回值\n            $tool.call($newList.add($column))\n        #end\n    #end\n    ##重新保存\n    $tableInfo.setFullColumn($newList)\n#end\n\n##对importList进行篡改\n#set($temp = $tool.newHashSet())\n#foreach($column in $tableInfo.fullColumn)\n    #if(!$column.type.startsWith(\"java.lang.\"))\n        ##带有反回值的方法调用时使用$tool.call来消除返回值\n        $tool.call($temp.add($column.type))\n    #end\n#end\n##覆盖\n#set($importList = $temp)"
      }, {
        "name" : "mybatisSupport.vm",
        "value" : "##针对Mybatis 进行支持，主要用于生成xml文件\n#foreach($column in $tableInfo.fullColumn)\n    ##储存列类型\n    $tool.call($column.ext.put(\"sqlType\", $tool.getField($column.obj.dataType, \"typeName\")))\n    #if($tool.newHashSet(\"java.lang.String\").contains($column.type))\n        #set($jdbcType=\"VARCHAR\")\n    #elseif($tool.newHashSet(\"java.lang.Boolean\", \"boolean\").contains($column.type))\n        #set($jdbcType=\"BOOLEAN\")\n    #elseif($tool.newHashSet(\"java.lang.Byte\", \"byte\").contains($column.type))\n        #set($jdbcType=\"BYTE\")\n    #elseif($tool.newHashSet(\"java.lang.Integer\", \"int\", \"java.lang.Short\", \"short\").contains($column.type))\n        #set($jdbcType=\"INTEGER\")\n    #elseif($tool.newHashSet(\"java.lang.Long\", \"long\").contains($column.type))\n        #set($jdbcType=\"INTEGER\")\n    #elseif($tool.newHashSet(\"java.lang.Float\", \"float\", \"java.lang.Double\", \"double\").contains($column.type))\n        #set($jdbcType=\"NUMERIC\")\n    #elseif($tool.newHashSet(\"java.util.Date\", \"java.sql.Timestamp\", \"java.time.Instant\", \"java.time.LocalDateTime\", \"java.time.OffsetDateTime\", \"\tjava.time.ZonedDateTime\").contains($column.type))\n        #set($jdbcType=\"TIMESTAMP\")\n    #elseif($tool.newHashSet(\"java.sql.Date\", \"java.time.LocalDate\").contains($column.type))\n        #set($jdbcType=\"TIMESTAMP\")\n    #else\n        ##其他类型\n        #set($jdbcType=\"VARCHAR\")\n    #end\n    $tool.call($column.ext.put(\"jdbcType\", $jdbcType))\n#end\n\n##定义宏，查询所有列\n#macro(allSqlColumn)#foreach($column in $tableInfo.fullColumn)$column.obj.name#if($foreach.hasNext), #end#end#end\n"
      }, {
        "name" : "queryPagePath",
        "value" : "core.page"
      }, {
        "name" : "responseResultPath",
        "value" : "core.result"
      }, {
        "name" : "field_optimistic",
        "value" : "version"
      }, {
        "name" : "field_remove",
        "value" : "remove"
      } ]
    }
  }
}